1、什么是Mybatis-Puls?

	Mybatis-Puls是Mybatis提供的增强的工具包，只做增强不做改变，为了简化开发工作，提高效率使用的

2、Mybatis-Puls有什么优势呢？

	无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑

	损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作

	强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求

	支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错

	支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库

	支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题

	支持 XML 热加载：Mapper 对应的 XML 支持热加载，对于简单的 CRUD 操作，甚至可以无 XML 启动

	支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作

	支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ）

	支持关键词自动转义：支持数据库关键词（order、key......）自动转义，还可自定义关键词

	内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用

	内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询

	内置性能分析插件：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询

	内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作

	内置 Sql 注入剥离器：支持 Sql 注入剥离，有效预防 Sql 注入攻击



3、如何使用mybatis-puls？

	在IDEA+Springboot中我们来使用他

	首先先引入依赖


	//boot整合的mybatis-puls
	<dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.0.5</version>
        </dependency>


	//lombok插件简化开发操作
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.4</version>
        </dependency>

	//mysql数据库连接驱动
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

	//德鲁伊连接池
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.10</version>
        </dependency>


	然后写实体类

	
import com.baomidou.mybatisplus.annotation.IdType;
import com.baomidou.mybatisplus.annotation.TableId;
import lombok.Data;

@Data
public class TblEmployee {

    @TableId(type = IdType.AUTO)
    private Integer id;
    private String lastName;
    private String email;
    private Integer gender;
    private Integer age;

}


	然后写Mapper类


import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import test.mybatis.puls.bean.TblEmployee;

//不用编写任何方法直接即可使用
public interface EmployeeMapper extends BaseMapper<TblEmployee> {


}


	然后我们再来写配置文件

spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    password: "123"
    username: "root"
    url: "jdbc:mysql://localhost:3306/kang?characterEncoding=UTF-8&useSSL=false"



	然后我们再来
	在测试类之中测试这个Mybatis-Puls是否加载成功


import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import test.mybatis.puls.bean.TblEmployee;
import test.mybatis.puls.mapper.EmployeeMapper;

@RunWith(SpringRunner.class)
@SpringBootTest
public class TestMybatisPulsApplicationTests {

    @Autowired
    EmployeeMapper employeeMapper;

    @Test
    public void contextLoads() {
        TblEmployee tblEmployee = new TblEmployee();
	
	//插入注意事项！，记得实体类之中配置type-auto
        tblEmployee.setAge(18);
        tblEmployee.setEmail("bigkang@qq.com");
        tblEmployee.setGender(0);
        tblEmployee.setLastName("黄康");
        tblEmployee.setId(null);

        employeeMapper.deleteById(10);
        employeeMapper.selectList(null);
    }

}
	

	可以给实体类设置表名等等

	//匹配数据库表字段
	@TableName("Tbl_Employee")
	public class Employee 


	//设置


	它内置整合了基本的所有的简单CRUD的操作

        Map<String,Object> map = new HashMap<>();
        map.put("user_id",id);
        List<UserAddress> list = userAddressMapper.selectByMap(map);

	userAddressMapper.selectList(new QueryWrapper<>().lambda())





















